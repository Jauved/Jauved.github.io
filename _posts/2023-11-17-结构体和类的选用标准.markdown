---
layout: post
title: "结构体和类的选用标准"
categories: [代码, 基础知识]
tags: 代码 基础知识 结构体 类
math: true
---

# 结构体和类的选用标准

## 00 前言

哪种情况下使用结构体和哪种情况下使用类?

## 01 处理方法

在 C# 中，选择使用结构体 (`struct`) 或类 (`class`) 取决于几个关键因素。这些因素包括对象的大小、不变性、值语义与引用语义的需求等。以下是一些指导原则：

### 使用结构体 (`struct`) 的情况：

1. **表示简单的数据结构**：如果您要表示一个小型的数据结构，如坐标点、颜色值等，结构体是一个很好的选择。
2. **值语义**：如果您希望您的数据类型具有值语义（即每个实例独立），并且实例之间的赋值操作应该是拷贝整个数据结构，而不是引用同一个对象，则应选择结构体。
3. **小型且不变**：对于小型（通常是16字节或更小）且不经常改变的数据类型，使用结构体可以提高性能，因为结构体在栈上分配内存，而不是在堆上。
4. **频繁创建和销毁**：如果您的类型会被频繁创建和销毁，使用结构体可能有助于减少垃圾回收器的压力。

### 使用类 (`class`) 的情况：

1. **复杂的数据结构**：对于更复杂或较大的数据结构，类是更好的选择。
2. **引用语义**：如果您希望您的数据类型具有引用语义（即多个引用可以指向同一个对象实例），则应选择类。
3. **需要继承**：如果您的数据类型需要继承其他类或实现接口，或者您需要使用多态，那么类是必须的。
4. **数据量较大**：对于包含大量数据的数据结构，使用类可以减少复制成本，因为类是通过引用传递的。
5. **需要空引用**：结构体总是有一个默认值，不能为 null。如果您需要 null 可能性作为一个特殊状态，那么类是更好的选择。

### 结论：

总的来说，结构体适用于小型、不可变的值类型，而类适用于更复杂、可变的对象。在实际应用中，应根据具体情况权衡两者之间的差异，并选择最适合您需求的一种。



###### 参考网页
